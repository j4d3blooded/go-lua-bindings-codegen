{{define "main"}}

package {{.PackageName}}

import (
	"fmt"
	"github.com/Shopify/go-lua"
	"strings"
	"io"
	{{range .Imports}}
	{{.}}
	{{end}}
)

type _LuaService interface {
	AddLibraryFunction(libName, funcName string, f lua.Function)
	GetState() *lua.State
}

const _LIB_NAME = "{{.LibName}}"

func InstallLuaExtension(ls _LuaService) {
	{{range .BindFuncs}}
		ls.AddLibraryFunction(
			_LIB_NAME,
			"{{.Name}}",
			_LuaBinding{{.Name}},
		)
	{{end}}
}

	{{range .BindFuncs}}

		func _LuaBinding{{.Name}}(l *lua.State) int {
			if l.Top() != {{len .Arguments}} {
				lua.Errorf(l, "incorret number of arguments.")
				return 0
			}

			{{range $i, $e := .Arguments}}
				{{printf "get_%vFromLua" $e.Type | execOr (map "index" $i "si" $i "type" $e.Type "argOrRes" "arg") "getValueFromLua"}}
				if !isTyped {
					lua.Errorf(l, "argument {{$i}} is incorrect type, should be {{$e.Type}}")
					return 0
				}
			{{end}}

			{{if gt (len .Results)  1}}
				{{range $i, $e := .Results}} res{{$i}}, {{end}} := {{.Name}}(
			{{else if eq (len .Results) 1}}
				res0 := {{.Name}}(
			{{else}}
				{{.Name}}(
			{{end}}
				{{- range $i, $e := .Arguments}} arg{{$i}},{{end}}
			)

			{{range $i, $e := .Results}}
				{{printf "insert_%vToLua" $e.Type | execOr (map "index" $i "type" $e.Type "argOrRes" "res") "insertValueToLua"}}
			{{end}}

			return {{len .Results}}
		}

	{{end}}


	{{range .CallerFuncs}}

		func _GetLuaCaller{{.Name}}(ls _LuaService, src io.Reader) (func({{range .Arguments}} {{.Name}} {{.Type}},{{end}}) ({{range .Results}} {{.Type}},{{end}} error), error) {
			pBytes, err := io.ReadAll(src)
			if err != nil {
				return nil, fmt.Errorf("error reading lua program: %w", err)
			}
			program := string(pBytes)

			err = ls.GetState().Load(strings.NewReader(program), program, "")
			if err != nil {
				return nil, fmt.Errorf("error parsing lua program: %w", err)
			}

			return func({{range $i, $e := .Arguments}} arg{{$i}} {{$e.Type}},{{end}}) ({{range .Results}} {{.Type}},{{end}} error){

				l:= ls.GetState()
				l.Load(strings.NewReader(program), program, "")

				if err := l.ProtectedCall(0, 0, 0); err != nil {
					err = fmt.Errorf("error intaking lua program: %w", err)
					return {{range .Results}} *new({{.Type}}),{{end}} err
				}

				l.Global("{{.Name}}")

				{{range $i, $e := .Arguments}}
					{{printf "insert_%vToLua" $e.Type | execOr (map "index" $i "type" $e.Type "argOrRes" "arg") "insertValueToLua"}}
				{{end}}

				if err := l.ProtectedCall({{len .Arguments}}, {{len .Results}}, 0); err != nil {
					err = fmt.Errorf("error doing lua call: %w", err)
					return {{range .Results}} *new({{.Type}}),{{end}} err
				}

				{{$tr := .Results}}
				{{range $ci, $_ := .Results}}
					{{$resIndex := tableIndex (len $tr) $ci}}
					{{$stackIndex := stackIndex $ci}}
					{{$e := index $tr $resIndex}}
					{{printf "get_%vFromLua" $e.Type | execOr (map "index" $resIndex "si" $stackIndex "type" $e.Type "argOrRes" "res" "erInfo" $tr) "getValueFromLua"}}
					if !isTyped {
						err := fmt.Errorf("lua call returned incorrect type, wanted {{$e.Type}}")
						return {{range $tr}} *new({{.Type}}),{{end}} err
					}
				{{end}}

				return {{range $i, $_ := .Results}} res{{$i}}, {{end}} nil

			}, nil

		}

	{{end}}

{{end}}

{{define "getValueFromLua"}}
	{{.argOrRes}}{{.index}}Temp := l.ToUserData({{.si}})
	{{.argOrRes}}{{.index}}, isTyped := {{.argOrRes}}{{.index}}Temp.({{.type}})
{{end}}

{{define "get_stringFromLua"}}
	{{.argOrRes}}{{.index}}, isTyped := l.ToString({{.si}})
{{end}}

{{define "get_intFromLua"}}
	{{.argOrRes}}{{.index}}, isTyped := l.ToInteger({{.si}})
{{end}}

{{define "insertValueToLua"}}
	l.PushLightUserData({{.argOrRes}}{{.index}})
{{end}}

{{define "insert_intToLua"}}
	l.PushInteger({{.argOrRes}}{{.index}})
{{end}}

{{define "insert_int8ToLua"}}
	l.PushInteger(int({{.argOrRes}}{{.index}}))
{{end}}

{{define "insert_int16ToLua"}}
	l.PushInteger(int({{.argOrRes}}{{.index}}))
{{end}}

{{define "insert_int32ToLua"}}
	l.PushInteger(int({{.argOrRes}}{{.index}}))
{{end}}

{{define "insert_int64ToLua"}}
	l.PushInteger(int({{.argOrRes}}{{.index}}))
{{end}}

{{define "insert_uintToLua"}}
	l.PushUnsigned({{.argOrRes}}{{.index}})
{{end}}

{{define "insert_uint8ToLua"}}
	l.PushUnsigned(uint({{.argOrRes}}{{.index}}))
{{end}}

{{define "insert_uint16ToLua"}}
	l.PushUnsigned(uint({{.argOrRes}}{{.index}}))
{{end}}

{{define "insert_uint32ToLua"}}
	l.PushUnsigned(uint({{.argOrRes}}{{.index}}))
{{end}}

{{define "insert_uint64ToLua"}}
	l.PushUnsigned(uint({{.argOrRes}}{{.index}}))
{{end}}

{{define "insert_float32ToLua"}}
	l.PushNumber(float32({{.argOrRes}}{{.index}}))
{{end}}

{{define "insert_float64ToLua"}}
	l.PushNumber(({{.argOrRes}}{{.index}}))
{{end}}

{{define "insert_stringToLua"}}
	l.PushString({{.argOrRes}}{{.index}})
{{end}}


{{define "luaStub"}}
---@alias int integer
---@alias int8 integer
---@alias int16 integer
---@alias int32 integer
---@alias int64 integer
---@alias uint integer
---@alias uint8 integer
---@alias uint16 integer
---@alias uint32 integer
---@alias uint64 integer
---@alias bool boolean
---@alias float32 number
---@alias flaot64 number

{{- range .BindFuncs}}
--- {{.Description}}
{{ range .Arguments -}}
---@param {{.Name}} {{.Type}} "{{.Description}}"
{{ end -}}
{{ range .Results -}}
---@return {{.Name}} {{.Type}} "{{.Description}}"
{{ end -}}
function {{.Name}}({{joinParamNamesLua .Arguments}}) end
{{end -}}

{{end}}